jobs:
- job: BuildArtifactsLinux
  displayName: Build Linux Artifacts

  variables:
    project: src/WebJobs.Script.WebHost/WebJobs.Script.WebHost.csproj
    configuration: release
    runtime: linux-x64
    drop_path: $(Build.ArtifactStagingDirectory)
    log_path: $(drop_path)/logs
    linux_drop_path: $(drop_path)/linux
    build_args: '-v m -c $(configuration) -r $(runtime) --self-contained true'

  templateContext:
    outputParentDirectory: $(drop_path)
    outputs:
    # TODO: onboard to Azure Artifacts Drops to allow accessing this from docker linux pipeline in msazure
    # https://eng.ms/docs/cloud-ai-platform/devdiv/one-engineering-system-1es/1es-docs/azure-artifacts/artifact-services-onboarding
    - output: pipelineArtifact
      displayName: Publish linux artifacts
      path: $(linux_drop_path)
      artifact: drop_linux
    - output: pipelineArtifact
      displayName: Publish logs
      path: $(log_path)
      artifact: logs_linux
      sbomEnabled: false
      condition: always()

  pool:
    name: 1es-pool-azfunc
    image: 1es-ubuntu-22.04
    os: linux

  steps:
  - template: /eng/ci/templates/install-dotnet.yml@self

  - task: DotNetCoreCLI@2
    displayName: Restore
    inputs:
      command: custom
      custom: restore
      projects: $(project)
      arguments: '-v m -r $(runtime) -p:PublishReadyToRun=true -bl:$(log_path)/restore.binlog' # add PublishReadyToRun=true for https://github.com/dotnet/sdk/issues/20701

  - task: DotNetCoreCLI@2
    displayName: Build
    inputs:
      command: custom
      custom: build
      projects: $(project)
      arguments: '$(build_args) --no-restore  -bl:$(log_path)/build.binlog'

  - task: DotNetCoreCLI@2
    displayName: Publish
    inputs:
      command: custom
      custom: publish
      publishWebProjects: false # we use our own publish logic
      zipAfterPublish: false # we use our own zip logic
      projects: $(project)
      arguments: '$(build_args) --no-build -bl:$(log_path)/publish.binlog -o $(linux_drop_path)/host'
